.. default-domain:: chpl

.. module:: Queue

Queue
=====
**Usage**

.. code-block:: chapel

   use Queue;

.. class:: Queue

   
   A data structure that allows for parallel-safe storage of elements. This Queue offers
   two variants: A FIFO Queue, which is the typical First-In-First-Out ordering as to
   be expected of a Queue, and the second being a 'Work' Queue, which does not impose
   any ordering whatsoever and aims to satiate the desire for high performance. Furthermore,
   we offer two further variants for each: a local version that is optimized for a single locale,
   and a distributed version that is optimized for multiple locales.


   .. attribute:: type eltType

      
      The type of the element.
      

   .. method:: proc enqueue(elts: eltType ...?nElts): (bool, int)

      
      Adds all elements to the queue, if successful. Elements are added in the
      order they are passed.
      
      If the queue is unbounded, it will always succeed with concatenation,
      but if the queue is bounded it may return false if not enough space is
      available.
      
      :arg elts: Tuple of elements
      :type elts: :type:`eltType`
      :returns: If the enqueue is successful, and how many elements are added.
      :rtype: :type:`(bool, int)`
      

   .. method:: proc enqueue(elts: [?n] eltType): (bool, int)

      
      Adds all elements to the queue. Elements are added in the order they in the array.
      See the first :proc:`enqueue` for more details.
      
      :returns: If the enqueue is successful, and how many elements are added.
      :rtype: :type:`(bool, int)`
      

   .. method:: proc enqueue(queue: Queue(eltType)): (bool, int)

      
      Adds all elements to the queue. Elements are added in a more optimized way
      depending on the underlying type of the queue, and maintain :attr:`this` ordering.
      See the first :proc:`enqueue` for more details.
      
      :returns: If the enqueue is successful, and how many elements are added.
      :rtype: :type:`(bool, int)`
      

   .. method:: proc enqueue(iterObj): (bool, int)

      
      Adds all elements yielded by the `iterObj`. In the case where not all
      elements can be added, then it is up to the user to be able to 'replay'
      elements not consumed and dropped. Elements are added in the order they are
      yielded. See the first :proc:`enqueue` for more details.
      
      :returns: If the enqueue is successful, and how many elements are added.
      :rtype: :type:`(bool, int)`
      

   .. method:: proc dequeue(): (bool, eltType)

      
      Remove an element from thr queue.
      
      :returns: If the queue is not empty and the item taken if any.
      :rtype: :type:`(bool, int)`
      

   .. method:: proc dequeue(nElems): (int, AppendExpr.Call08)

      
      Remove at most `nElems` elements from the queue.
      
      :returns: If the queue is not empty and an array of items taken, if any.
      :rtype: :type:`(bool, [?n] eltType)`
      

   .. method:: proc freeze(): bool

      
      Freezes the queue, making it immutable, if supported.
      
      :returns: If it is a supported operation.
      :rtype: :type:`bool`
      

   .. method:: proc clear(): bool

      
      Clears the queue of all elements in a best-effort approach. Elements added
      concurrently, or elements moved around via means of work stealing may be
      missed.
      
      :returns: If the queue is unfrozen.
      :rtype: :type:`bool`
      

   .. method:: proc unfreeze(): bool

      
      Unfreezes the queue, making it mutable, if supported.
      
      :returns: If it is a supported operation.
      :rtype: :type:`bool`
      

   .. method:: proc isFrozen(): bool

      
      Determines if the queue is frozen (immutable).
      
      :returns: If queue is frozen
      :rtype: :type:`bool`
      

   .. itermethod:: iter these()

      
      If the queue is frozen, iteration will iterate over all elements in the list
      without consuming them. If the queue is unfrozen, then iteration will consume
      all elements in the list equivalent to a highly optimized sequence of dequeues.
      
      :yields: Elements in the queue.
      :ytype: :type:`eltType`
      

   .. method:: proc length: uint

      
      If the queue is frozen, then it returns a deterministic # of items in the queue.
      If the queue is unfrozen, then it makes an implementation-dependent best-effort.
      
      :returns: Number of elements in the queue.
      :rtype: :type:`uint`
      

   .. method:: proc isEmpty(): bool

      
      If the queue is frozen, then it returns a deterministic yes/no if the queue is empty.
      If the queue is unfrozen, then it makes an implementation-dependent best-effort.
      
      :returns: If the queue is empty.
      :rtype: :type:`bool`
      

   .. method:: proc isFull(): bool

      
      If the queue is frozen, then it returns a deterministic yes/no if the queue is full.
      If the queue is unfrozen, then it makes an implementation-dependent best-effort.
      
      :returns: If the queue is full.
      :rtype: :type:`bool`
      

   .. method:: proc capacity: uint

      
      If the queue is unbounded, then this will return 0. If the queue is bounded,
      then it will return the upper bounds of number of elements it may hold.
      
      :returns: Capacity of the queue; if the queue is unbounded, always 0.
      :rtype: :type:`uint`
      

.. class:: QueueFactory

   .. method:: proc makeDistributedBoundedFIFO(type eltType, maxElems: uint = 0, targetLocales: [] locale = Locales): Queue(eltType)

      
      Creates a distributed bounded strict First-In-First-Out Queue.
      
      :type eltType: Element type
      
      :arg maxElems: Maximum number of elements in the queue; halts if value is 0.
      :type maxElems: uint
      
      :arg targetLocales: Locales to distribute across.
      :type targetLocales: :type:`[] locales`
      

   .. method:: proc makeBoundedFIFO(type eltType, maxElems: uint = 0): Queue(eltType)

      
      Creates a local bounded strict First-In-First-Out Queue.
      
      :type eltType: Element type
      
      :arg maxElems: Maximum number of elements in the queue; halts if value is 0.
      :type maxElems: :type:`uint`
      

   .. method:: proc makeDistributedUnboundedFIFO(type eltType, targetLocales: [] locale = Locales): Queue(eltType)

      
      Creates a distributed unbounded strict First-In-First-Out Queue.
      
      :type eltType: Element type
      
      :arg targetLocales: Locales to distribute across.
      :type targetLocales: :type:`[] locales`
      

   .. method:: proc makeUnboundedFIFO(type eltType): Queue(eltType)

      
      Creates a local unbounded strict First-In-First-Out Queue.
      
      :type eltType: Element type
      

   .. method:: proc makeDistributedBalancedQueue(type eltType, targetLocales: [] locale = Locales): Queue(eltType)

      
      Creates a distributed work stealing unbounded queue.
      
      :type eltType: Element type
      
      :arg targetLocales: Locales to distribute across.
      :type targetLocales: :type:`[] locales`
      

   .. method:: proc makeBalancedQueue(type eltType): Queue(eltType)

      
      Creates a distributed work stealing unbounded queue.
      
      :type eltType: Element type
      
      :arg targetLocales: Locales to distribute across.
      :type targetLocales: :type:`[] locales`
      


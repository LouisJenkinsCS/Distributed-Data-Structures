.. default-domain:: chpl

.. module:: DistributedDeque

DistributedDeque
================
**Usage**

.. code-block:: chapel

   use DistributedDeque;

.. data:: config param distributedDequeBlockSize = 8

   
   Size of each unroll block for each local deque node.

.. enum:: enum Ordering { NONE, FIFO, LIFO }

   
   The ordering used for serial iteration. NONE, the default, is the most performant
   and is algorithmically similar to parallel iteration.


.. class:: DistributedDeque : Collection

   
   A parallel-safe scalable distributed double-ended queue that supports both
   insertion and removal from either end of the queue. Can be used as a Queue,
   Stack, or even a List.


   .. attribute:: var cap: int

      
      Capacity, the maximum number of elements a Deque can hold. A `cap` of -1 is
      considered unbounded.
      

   .. attribute:: var targetLocales: [targetLocDom] locale

      
      Locales to distribute the `Deque` across.
      

   .. method:: proc DistributedDeque(type eltType, cap: int = -1, targetLocales: [?locDom] locale = Locales)

   .. method:: proc add(elt: eltType): bool

      
      Syntactic sugar for `pushBack`.
      

   .. method:: proc remove(): (bool, eltType)

      
      Syntactic sugar for `popFront`.
      

   .. method:: proc enqueue(elt: eltType): bool

      
      Syntactic sugar for `pushBack`.
      

   .. method:: proc dequeue(): (bool, eltType)

      
      Syntactic sugar for `popFront`.
      

   .. method:: proc push(elt: eltType): bool

      
      Syntactic sugar for `pushBack`.
      

   .. method:: proc pop(): (bool, eltType)

      
      Syntactic sugar for `popBack`.
      

   .. method:: proc pushBack(elt: eltType): bool

      
      Appends the element to the tail.
      

   .. method:: proc popBack(): (bool, eltType)

      
      Removes the element at the tail.
      

   .. method:: proc pushFront(elt: eltType): bool

      
      Appends the element to the head.
      

   .. method:: proc popFront(): (bool, eltType)

      
      Removes the element at the head.
      

   .. method:: proc getSize(): int

      
      Obtains the number of elements held by this queue.
      

   .. method:: proc contains(elt: eltType): bool

      
      Performs a lookup for the element in the data structure.
      

   .. itermethod:: iter these(param order: Ordering = Ordering.NONE): eltType

      
      Iterate over all elements in the deque in the order specified.
      
      **Warning:** Calling other methods while inside of an iterator is not safe as
      it will likely lead to deadlock.
      
      **FIXME:** Likely can be worked around by either using snapshot iteration approach
      or by making the lock reentrant and forcing all iterators to acquire all locks in
      some global locking order.
      

   .. itermethod:: iter these(param order: Ordering = Ordering.NONE): eltType

   .. itermethod:: iter these(param order: Ordering = Ordering.NONE): eltType

   .. itermethod:: iter these(param order: Ordering = Ordering.NONE, param tag: iterKind)

   .. itermethod:: iter these(param order: Ordering = Ordering.NONE, param tag: iterKind, followThis)

   .. method:: proc deinit()


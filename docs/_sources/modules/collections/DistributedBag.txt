.. default-domain:: chpl

.. module:: DistributedBag
   :synopsis: A parallel-safe distributed multiset implementation that scales in terms of

DistributedBag
==============
**Usage**

.. code-block:: chapel

   use DistributedBag;


 A parallel-safe distributed multiset implementation that scales in terms of
 nodes, processors per node (PPN), and workload; The more PPN, the more segments
 we allocate to increase raw parallelism, and the larger the workload the better
 locality (see `distributedBagInitialBlockSize`). This data structure is unordered
 and employs its own work-stealing algorithm to balance work across nodes.

 To use :record:`DistributedBag`, the constructor must be invoked explicitly to 
 properly initialize the structure. Using the default state without initializing
 will result in a halt.

 .. code-block:: chapel

   var bag = new DistBag(int, targetLocales=Locales[0..1]);

While usage of the `bag` can be used safely across locales, each locale has its own
instance allocated in it's address space, a `privatized` copy. While this instance
is managed transparently from the user, its impact on performance is significant.
For example, if all elements are allocated on a single locale, then other locales
will need perform work-stealing to obtain items, which degrades performance. However,
because initializing the structure from one node is appealing, the user may use the
:proc:`balance` method to redistribute data.
	
.. code-block:: chapel
	
   // All elements are added on this node...
	forall elem in 1 .. 100 {
		bag.add(elem);
	}
   // Elements redistributed across all nodes...
	bag.balance();
   

.. data:: config const distributedBagInitialBlockSize = 1024

   
   The initial amount of elements in an unroll block. Each successive unroll block
   is double the size of it's predecessor, allowing for better locality for when
   there are larger numbers of elements. The better the locality, the better raw
   performance and easier it is to redistribute work.
   

.. data:: config const distributedBagWorkStealingRatio = 0.25

   
   To prevent stealing too many elements (horizontally) from another node's segment
   (hence creating an artifical load imbalance), if the other node's segment has
   less than a certain threshold (see `distributedBagWorkStealingMemCap`) but above
   another threshold (see `distributedBagWorkStealingMinElems`), we steal a percentage of their
   elements, leaving them with majority of their elements. This way, the amount the
   other segment loses is proportional to how much it owns, ensuring a balance.
   

.. data:: config const distributedBagWorkStealingMemCap: real = 1.0

   
   The maximum amount of work to steal from a horizontal node's segment. This
   should be set to a value, in megabytes, that determines the maximum amount of
   data that should be sent in bulk at once. The maximum number of elements is
   determined by: (distributedBagWorkStealingMemCap * 1024 * 1024) / sizeof(eltType).
   For example, if we are storing 8-byte integers and have a 1MB limit, we would
   have a maximum of 125,000 elements stolen at once.
   

.. data:: config const distributedBagWorkStealingMinElems = 1

   
   The minimum number of elements a horizontal segment must have to become eligible
   to be stolen from. This may be useful if some segments produce less elements than
   others and should not be stolen from.
   

.. data:: config const distributedBagMaxBlockSize = 1024*1024

   
   The maximum amount of elements in an unroll block. This is crucial to ensure memory
   usage does not rapidly grow out of control.
   

.. record:: DistBag

   
   A parallel-safe distributed multiset implementation that scales in terms of
   nodes, processors per node (PPN), and workload; The more PPN, the more segments
   we allocate to increase raw parallelism, and the larger the workload the better
   locality (see `distributedBagInitialBlockSize`). This data structure is unordered and employs
   its own work-stealing algorithm, and provides a means to obtain a privatized instance of
   the data structure for maximized performance.
   


   .. attribute:: type eltType

   .. method:: proc forwarding_expr1__value()


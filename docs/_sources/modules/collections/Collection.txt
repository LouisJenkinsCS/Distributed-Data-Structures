.. default-domain:: chpl

.. module:: Collection

Collection
==========
**Usage**

.. code-block:: chapel

   use Collection;

.. class:: Collection

   
   A 'Collection' is a data structure, a container for elements that provide support
   for insert, lookup, remove, and iteration operations.


   .. attribute:: type eltType

      
      The type of element that this Collection holds.
      

   .. method:: proc add(elt: eltType): bool

      
      Adds an element to this data structure.
      

   .. method:: proc remove(): (bool, eltType)

      
      Removes an arbitrary element from this data structure.
      
      **BUG:** Compiler will segfault if the returned value is not captured at callsite.
      
      **FIX:** Ensure that you always capture the return value...
      
      ::
      
        var capturedRetval = c.remove()
      
      **BUG:** Loop Invariant Code Motion causes undefined behavior if assigned to a
      variable declared outside of loop
      
      **FIX:** Use the `--no-loop-invariant-code-motion` to disable LICM.
      Otherwise, just make sure you always capture the return value inside of a loop
      in a variable not declared outside of loop...
      
      ::
      
        for i in 1 .. N {
          var retval = c.remove();
        }
      
      

   .. method:: proc contains(elt: eltType): bool

      
      Determine whether an element exists in this collection.
      

   .. method:: proc clear()

      
      Clears all elements in this collection.
      

   .. method:: proc isEmpty(): bool

      
      Check if this data structure is empty.
      

   .. method:: proc size(): int

      
      Obtain the number of elements contained in this collection.
      

   .. itermethod:: iter these(): eltType

      
      Iterate over all elements in the data structure.
      
      **BUG:** Compiler does not currently allow overloading standalone or leader/follower
      iterators, and as such only serial iterators may be used with the base type.
      

   .. method:: proc freeze(): bool

      
      Declares this collection immutable.
      
      **NOTE:** This method may be removed from the core interface.
      

   .. method:: proc unfreeze(): bool

      
      Declares this collection mutable.
      
      **NOTE:** This method may be removed from the core interface.
      

   .. method:: proc canFreeze(): bool

      
      Whether this collection supports freezing.
      
      **NOTE:** This method may be removed from the core interface.
      

   .. method:: proc isFrozen(): bool

      
      Determines if this collection is currently frozen.
      
      **NOTE:** This method may be removed from the core interface.
      

.. function:: proc +=(ref c: Collection(?eltType), elt: eltType)

   
   Syntactic sugar for 'add'.
   
   **BUG:** Compiler produces a warning that `c` should be a `ref`, when it is not needed
   because it is a class and can be used by value. Need a pragma to disable this?
   As such, this cannot be used where `ref` intents cannot be used, such as ``forall``
   and ``coforall`` loops.


.. default-domain:: chpl

.. module:: Collection

Collection
==========
**Usage**

.. code-block:: chapel

   use Collection;

.. class:: Collection

   
   A 'Collection' is a data structure, a container for elements that provide support
   for insert, lookup, remove, and iteration operations.
   
   BUG: Compiler does not currently allow overloading standalone or leader/follower
   iterators, and as such only serial iterators may be used with a Collection.


   .. attribute:: type eltType

   .. method:: proc add(elt: eltType): bool

      
      Adds an element to this data structure.
      

   .. method:: proc remove(): (bool, eltType)

      
      Removes an arbitrary element from this data structure.
      
      BUG: Compiler will segfault if the returned value is not captured at callsite.
      'var capturedRetval = c.remove()'
      BUG: Loop Invariant Code Motion causes undefined behavior if assigned to a
      variable declared outside of loop. Use '--no-loop-invariant-code-motion' flag...
      

   .. method:: proc contains(elt: eltType): bool

      
      Lookup an element in the data structure, returning whether or not it was present.
      

   .. method:: proc clear()

      
      Clears all elements from this data structure. By default, this will repeatedly
      invoke 'remove' until emptied.
      

   .. method:: proc isEmpty(): bool

      
      Check if this data structure is empty. By default, this will check if `size`
      returns 0.
      

   .. method:: proc size(): int

      
      Obtain the number of elements contained in this data structure.
      

   .. itermethod:: iter these(): eltType

      
      Iterate over all elements in the data structure.
      

   .. method:: proc freeze(): bool

   .. method:: proc unfreeze(): bool

   .. method:: proc canFreeze(): bool

   .. method:: proc isFrozen(): bool

.. function:: proc +=(ref c: Collection(?eltType), elt: eltType)

   
   Syntactic sugar for 'add'.

